<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装JetBrains Mono字体</title>
      <link href="an-zhuang-zi-ti/"/>
      <url>an-zhuang-zi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是JetBrainsMono"><a href="#什么是JetBrainsMono" class="headerlink" title="什么是JetBrainsMono"></a>什么是JetBrainsMono</h3><p>JetBrains mono是 Jetbrains公司开发的一款开源字体，可免费商用，也是为开发者设计的字体，字体默认安装在 Jetbrains全家桶中的任意一款软件，从v2e19.3版开始，软件自带此款字体，老版本的可以自行下载安装，整体看起来比Input mono好看。<br>为什么说是为开发者设计的字体呢？<br>    在当今的大部分时间里，我们作为开发人员都在看代码。我们一直在寻找最佳字体，以使我们更容易在屏幕上查看文本。但是，许多流行字体中的逻辑并不总是考虑到通读代码和阅读书本之间的別。我们的眼以非常不同的方式沿代码移动，通常必须垂直移动和水平移动，这与阅读书籍不同，因为它们总是沿同一方向沿文本滑动因此，在使用 letBrains mono进行开发时，除其他外，重点研究了在长时间使用代码期间可能导致眼睛疲劳的问题。我们考虑了字母的大小和形状等问题；它们之间的空间量，自然以等竞字体设计的平衡；一些看起来不必要的纽节和符号之间不清楚的区别。<br>个人感觉：字体不适合新手开发，比如你输入一个-&gt;，它会给优化成→，那么会导致你误认为它就是一个箭头，给阅读代码带来一定的障碍。同时你给别人截图代码的时候，若是没有用过这种字体也会看不习惯，难以阅读。</p><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><ol><li>在官网下载字体安装包<br><a href="https://www.jetbrains.com/lp/mono/">https://www.jetbrains.com/lp/mono/</a></li><li>解压字体包<br>解压安装包后，选中所有字体文件，右键安装，完成后重启IntellJ Idea （<strong>安装字体时选择给所有用户安装</strong>）</li><li>选择字体<br>File &gt; Settings &gt; Editor &gt; Font 选择：JetBrains Mono</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JetBrains </tag>
            
            <tag> Font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装Git（yum、源码包方式）</title>
      <link href="centos7-an-zhuang-git-yum-yuan-ma-bao-fang-shi/"/>
      <url>centos7-an-zhuang-git-yum-yuan-ma-bao-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="查看是否安装过Git"><a href="#查看是否安装过Git" class="headerlink" title="查看是否安装过Git"></a>查看是否安装过Git</h3><p>若出现版本号，则表示已经安装过了，不需要再次安装。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装以后查看版本号，能看到则表示安装成功；使用yum安装的默认路径在 /usr/bin/git 下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="移除git"><a href="#移除git" class="headerlink" title="移除git"></a>移除git</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum remove git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>使用git源码安装git</p><ol><li>安装依赖包<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下载git源码并解压<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;usr&#x2F;local&#x2F;git &amp;&amp; cd &#x2F;usr&#x2F;local&#x2F;gitwget https:&#x2F;&#x2F;github.com&#x2F;git&#x2F;git&#x2F;archive&#x2F;vxxx.zip # xxx 版本号unzip vxxx.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>进入解压目录，配置参数<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git allmake prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>等待安装完成，使用 git –version 查看版本号，能看到即可</li><li>配置PATH<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;profileexport PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin:$PATH# 刷新使文件生效source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装、升级 Nodejs</title>
      <link href="centos7-an-zhuang-sheng-ji-nodejs/"/>
      <url>centos7-an-zhuang-sheng-ji-nodejs/</url>
      
        <content type="html"><![CDATA[<h3 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h3><p>想安装的版本可以在 <a href="https://nodejs.org/download/release/">https://nodejs.org/download/release/</a> 中查找。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;usr&#x2F;local&#x2F;nodejscd &#x2F;usr&#x2F;local&#x2F;nodejswget https:&#x2F;&#x2F;nodejs.org&#x2F;download&#x2F;release&#x2F;v12.2.0&#x2F;node-v12.2.0-linux-x64.tar.gztar zxvf node-v12.2.0-linux-x64.tar.gzmv node-v12.2.0-linux-x64.tar.gz node-v12.2.0# 修改PATHvim &#x2F;etc&#x2F;profileexport NodeJs&#x3D;&#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;node-v12.2.0export PATH&#x3D;$PATH:NodeJs&#x2F;bin# 刷新source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="升级Node版本"><a href="#升级Node版本" class="headerlink" title="升级Node版本"></a>升级Node版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g n# 通过n来升级node版本，n v14.2.0 指定 v14.2.0 版本&#x2F;usr&#x2F;local&#x2F;node_project&#x2F;node&#x2F;bin&#x2F;n ls&#x2F;usr&#x2F;local&#x2F;node_project&#x2F;node&#x2F;lib&#x2F;node_modules&#x2F;n&#x2F;bin&#x2F;n v14.2.0# 备份原来node版本，替换成最新的版本cd &#x2F;usr&#x2F;bin&#x2F;mv node node_v12.2.0ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node &#x2F;usr&#x2F;bin&#x2F;node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="升级npm版本"><a href="#升级npm版本" class="headerlink" title="升级npm版本"></a>升级npm版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 指定版本npm install npm@6.14.2 -g# 最新版本npm install npm@latest -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建一个node项目"><a href="#创建一个node项目" class="headerlink" title="创建一个node项目"></a>创建一个node项目</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;usr&#x2F;app&#x2F;web&#x2F;demo &amp;&amp; cd &#x2F;usr&#x2F;app&#x2F;web&#x2F;demo&#x2F;npm initcat package.json&#123;  &quot;name&quot;: &quot;demo&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;lanren node demo&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: &#123;    &quot;start&quot;: &quot;node index.js&quot;  &#125;,  &quot;author&quot;: &quot;lanren&quot;,  &quot;license&quot;: &quot;ISC&quot;&#125;# 新建 index.jsvim index.jsvar http &#x3D; require(&quot;http&quot;);http.createServer(function(req,res)&#123;    res.write(&#39;&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;head&gt;&#39;);    res.write(&quot;lanren node demo!&quot;);    res.end();&#125;).listen(4002);# 启动npm run start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fatal: refusing to merge unrelated histories问题</title>
      <link href="fatal-refusing-to-merge-unrelated-histories-wen-ti/"/>
      <url>fatal-refusing-to-merge-unrelated-histories-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="问题情况"><a href="#问题情况" class="headerlink" title="问题情况"></a>问题情况</h3><p>本地创建了一个仓库（存在README），吧本地仓库和GitHub上关联后，使用git pull 出现以下问题：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">fatal: refusing to merge unrelated histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>是因为两个分支是两个不同的版本，具有不同的提交历史。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>添加命令：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>可以允许不相关历史提交，强行合并。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git将本地代码上传到GitHub</title>
      <link href="shi-yong-git-jiang-ben-di-dai-ma-shang-chuan-dao-github/"/>
      <url>shi-yong-git-jiang-ben-di-dai-ma-shang-chuan-dao-github/</url>
      
        <content type="html"><![CDATA[<h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><p>在本地环境项目目录下打开Git Base Here，输入git init 命令.</p><h3 id="配置全局变量"><a href="#配置全局变量" class="headerlink" title="配置全局变量"></a>配置全局变量</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.name <span class="token string">"GitHub用户名"</span>git config --global user.email <span class="token string">"GitHub登陆邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加到本地仓库"><a href="#添加到本地仓库" class="headerlink" title="添加到本地仓库"></a>添加到本地仓库</h3><ol><li>本地项目目录的文件添加到暂缓区.<pre class="line-numbers language-git" data-language="git"><code class="language-git">git add . (. 表示所有文件)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>暂缓区的文件提交到本地仓库<pre class="line-numbers language-git" data-language="git"><code class="language-git">git commit -m <span class="token string">"注释信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="本地仓库和GitHub仓库关联"><a href="#本地仓库和GitHub仓库关联" class="headerlink" title="本地仓库和GitHub仓库关联"></a>本地仓库和GitHub仓库关联</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote add origin https://github.com/xxxxx/xxxxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="代码从本地仓库上传到GitHub仓库"><a href="#代码从本地仓库上传到GitHub仓库" class="headerlink" title="代码从本地仓库上传到GitHub仓库"></a>代码从本地仓库上传到GitHub仓库</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git pull origin mastergit push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更新远程仓库代码到本地"><a href="#更新远程仓库代码到本地" class="headerlink" title="更新远程仓库代码到本地"></a>更新远程仓库代码到本地</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git fetch origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity与默认CorsFilter冲突问题（异常情况）</title>
      <link href="springsecurity-yu-mo-ren-corsfilter-chong-tu-wen-ti-er/"/>
      <url>springsecurity-yu-mo-ren-corsfilter-chong-tu-wen-ti-er/</url>
      
        <content type="html"><![CDATA[<h3 id="问题情况"><a href="#问题情况" class="headerlink" title="问题情况"></a>问题情况</h3><p>在SpringBoot项目中整合了Spring Security OAuth2做token认证，出现Cors跨域异常，便使用了CorsFilter进行跨域处理配置，相关配置如下（但是还是出现了问题）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanCreationException</span><span class="token operator">:</span> <span class="token class-name">Error</span> creating bean <span class="token keyword">with</span> <span class="token namespace">name</span> <span class="token string">'springSecurityFilterChain'</span> defined in <span class="token keyword">class</span> path resource <span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanNotOfRequiredTypeException</span><span class="token operator">:</span> <span class="token class-name">Bean</span> named <span class="token string">'corsFilter'</span> is expected <span class="token keyword">to</span> <span class="token namespace">be</span> of type <span class="token string">'org.springframework.web.filter.CorsFilter'</span> but was actually of type <span class="token string">'org.springframework.boot.web.servlet.FilterRegistrationBean'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomCorsFilter</span> <span class="token keyword">extends</span> <span class="token class-name">CorsFilter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Constructor accepting a &#123;@link CorsConfigurationSource&#125; used by the filter     * to find the &#123;@link CorsConfiguration&#125; to use for each incoming request.     *     * @see UrlBasedCorsConfigurationSource     */</span>    <span class="token keyword">public</span> <span class="token class-name">CustomCorsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token function">configurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span> <span class="token function">configurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CorsConfiguration</span> corsConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowedHeaders <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"X-Requested-With"</span><span class="token punctuation">,</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exposedHeaders <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"X-Requested-With"</span><span class="token punctuation">,</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowedMethods <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowedOrigins <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfig<span class="token punctuation">.</span><span class="token function">setAllowedHeaders</span><span class="token punctuation">(</span>allowedHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfig<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span>allowedMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfig<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span>allowedOrigins<span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfig<span class="token punctuation">.</span><span class="token function">setExposedHeaders</span><span class="token punctuation">(</span>exposedHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfig<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">36000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfig<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> source<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
            <tag> OAuth2 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity与默认CorsFilter冲突问题（一般情况）</title>
      <link href="springsecurity-yu-mo-ren-corsfilter-chong-tu-wen-ti-1/"/>
      <url>springsecurity-yu-mo-ren-corsfilter-chong-tu-wen-ti-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Cors简单介绍"><a href="#Cors简单介绍" class="headerlink" title="Cors简单介绍"></a>Cors简单介绍</h3><p>Cors是一个W3C标准，全称“跨域资源共享（Cross-origin resource sharing）”.它允许浏览器向跨源服务器发出XMLHttpRequest请求，从而克服了Ajax只能同源使用的限制。</p><h3 id="Response响应头"><a href="#Response响应头" class="headerlink" title="Response响应头"></a>Response响应头</h3><table><thead><tr><th align="center">响应头字段名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">Access-Control-Allow-Origin</td><td align="center">允许访问的客户端域名</td></tr><tr><td align="center">Access-Control-Allow-Credentials</td><td align="center">是否允许请求带有验证信息，若要获取客户端域下的cookie时，需要将其设置为true。</td></tr><tr><td align="center">Access-Control-Allow-Headers</td><td align="center">允许服务端访问的客户端请求头</td></tr><tr><td align="center">Access-Control-Allow-Methods</td><td align="center">允许访问的HTTP请求方法</td></tr><tr><td align="center">Access-Control-Max-Age</td><td align="center">用来指定预检请求的有效期(秒)，在有效期内不在发送预检请求直接请求。</td></tr></tbody></table><h3 id="SpringBoot配置Cors"><a href="#SpringBoot配置Cors" class="headerlink" title="SpringBoot配置Cors"></a>SpringBoot配置Cors</h3><p>继承WebMvcConfigurer，自定义Filter注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.配置SpringSecurity设置不拦截OPTIONS请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>OPTIONS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.配置CorsFilter的优先级要优先于SpringSecurity配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
            <tag> OAuth2 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
